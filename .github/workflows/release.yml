name: Release Binaries

on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Build binaries for ${{ matrix.goos }} / ${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64  # 跳过不常用组合

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'  # 根据你的项目选择 Go 版本

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          ext=""
          if [ "$GOOS" = "windows" ]; then ext=".exe"; fi
          go build -ldflags="-s -w" -o "jcli${ext}" .
          zip "dist/jcli-${GOOS}-${GOARCH}.zip" "jcli${ext}"

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: jcli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*.zip*
  
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
      - name: Get version from tag
        id: version
        run: echo "VERSION=$(git describe --tags --match 'v*' --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Debug whoami
        run: |
          curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/**/*
          tag_name: ${{ steps.version.outputs.VERSION  }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
